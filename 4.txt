#include <iostream>
using namespace std;
#include "windows.h"


struct Node {
	double data;
	Node* next, * prev;
};
Node* createFirstNode(Node*& start, Node*& end, double data) {
	Node *current = new Node();
	current->data = data;
	current->next = current->prev = nullptr;
	start = end = current;
	return current;
}
void addToStart(Node*& start, Node*& end, double data) {
	if (start==end && start==nullptr) {
		createFirstNode(start, end, data);
	}
	else {
		Node* new_node = new Node();
		new_node->prev = nullptr;
		new_node->next = start;
		new_node->data = data;
		start->prev = new_node;
		start = new_node;
		
		return;
	}
}
void addToEnd(Node*& start, Node*& end, double data) {
	if( start == end && start == nullptr) {
		createFirstNode(start, end, data);
	
	}
	else {
		Node* new_node = new Node();
		new_node->prev = end;
		new_node->next = nullptr;
		new_node->data = data;
		end->next = new_node;
		end = new_node;
		return;
	}
}
void printListStart(Node*& start, Node*& end) {
	if (start == end && start == nullptr) {
		cout << "empty list";
	}
	else {
		Node* currentNode = start;
		cout << "printed from start\n";
		while (currentNode != nullptr) {
			cout << currentNode->data<<'\t';
			currentNode = currentNode->next;
		}
		cout << "\n";
	}
}
void printListEnd(Node*& start, Node*& end) {
	if (start == end && start == nullptr) {
		cout << "empty list";
	}
	else {
		Node* currentNode = end;
		cout << "printed from end\n";
		while (currentNode != nullptr) {
			cout << currentNode->data << '\t';
			currentNode = currentNode->prev;
		}
		cout << "\n";
	}
}
Node * findMinInList(Node*& start, Node*& end) {
	Node* current = start;
	Node *min_node = current;
	while (current != nullptr) {
		if (current->data < min_node->data) {
			min_node = current;
		}
		current = current->next;
	}
	return min_node;
}
void changePlace(Node*& start, Node*& end) {
	Node *minNode=findMinInList(start, end);
	 if (minNode == end) {
		return; // No need to swap if the minimum element is already the last node
	}

	Node* prevEnd = end->prev;
	Node* prevMin = minNode->prev;
	Node* nextMin = minNode->next; 
	prevEnd->next = minNode;
	minNode->next = nullptr;
	if (prevMin != nullptr) {
		prevMin->next = end;
	}
	else {
		start = end;
	}
	if (nextMin != end) {
		end->next = nextMin;
		
	}
	else {
		nextMin->next = minNode;
	}
	end->prev = prevMin;
	minNode->prev = prevEnd;
}

int main() {
	Node* start = nullptr;
	Node* end = nullptr;
	addToStart(start, end, 4);
	addToStart(start, end, 0);
	addToStart(start, end, 45);
	addToEnd(start, end, 1);
	printListStart(start, end);
	changePlace(start, end);
	printListStart(start, end);

}