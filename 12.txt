#include <iostream>
using namespace std;
#include "windows.h"


struct Node {
	int data;
	Node* next, * prev;
};
Node* createFirstNode(Node*& start, Node*& end, int data) {
	Node *current = new Node();
	current->data = data;
	current->next = current->prev = nullptr;
	start = end = current;
	return current;
}
void addToStart(Node*& start, Node*& end, int data) {
	if (start==end && start==nullptr) {
		createFirstNode(start, end, data);
	}
	else {
		Node* new_node = new Node();
		new_node->prev = nullptr;
		new_node->next = start;
		new_node->data = data;
		start->prev = new_node;
		start = new_node;
		
		return;
	}
}
void addToEnd(Node*& start, Node*& end, int data) {
	if( start == end && start == nullptr) {
		createFirstNode(start, end, data);
	
	}
	else {
		Node* new_node = new Node();
		new_node->prev = end;
		new_node->next = nullptr;
		new_node->data = data;
		end->next = new_node;
		end = new_node;
		return;
	}
}
void printListStart(Node*& start, Node*& end) {
	if (start == end && start == nullptr) {
		cout << "empty list";
	}
	else {
		Node* currentNode = start;
		cout << "printed from start\n";
		while (currentNode != nullptr) {
			cout << currentNode->data<<'\t';
			currentNode = currentNode->next;
		}
		cout << "\n";
	}
}
void printListEnd(Node*& start, Node*& end) {
	if (start == end && start == nullptr) {
		cout << "empty list";
	}
	else {
		Node* currentNode = end;
		cout << "printed from end\n";
		while (currentNode != nullptr) {
			cout << currentNode->data << '\t';
			currentNode = currentNode->prev;
		}
		cout << "\n";
	}
}
void deleteNode(Node * &start, Node * &end, Node * nodeToDelete) {
	if (nodeToDelete == nullptr) {
		return;
	}

	if (nodeToDelete == start) {
		start = nodeToDelete->next;
	}

	if (nodeToDelete == end) {
		end = nodeToDelete->prev;
	}

	if (nodeToDelete->prev != nullptr) {
		nodeToDelete->prev->next = nodeToDelete->next;
	}

	if (nodeToDelete->next != nullptr) {
		nodeToDelete->next->prev = nodeToDelete->prev;
	}

	delete nodeToDelete;
}
void delNechet(Node*& start, Node*& end) {
	Node* current = start;
	while (current != nullptr) {
		Node* nextNode = current->next;
		if ((current->data % 2) != 0) {
			deleteNode(start, end, current);
		}
		current = nextNode;
	}
}
int main() {
	Node* start = nullptr;
	Node* end = nullptr;
	addToStart(start, end, 4);
	addToStart(start, end, 0);
	addToStart(start, end, 45);
	addToEnd(start, end, 1);
	printListStart(start, end);
	delNechet(start, end);
	printListStart(start, end);

}