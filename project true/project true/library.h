#pragma once
#ifndef TREAP1_H
#define TREAP1_H

#include <iostream>
#include <fstream>
#include <random>

struct Node
{
    int key;
    int priority;
    Node* left;
    Node* right;

    Node(int k) : key(k), priority(rand()), left(nullptr), right(nullptr) {}
};
///////////////////////////////////////////////////////////////////////////////////////////////////
Node* merge(Node* left, Node* right);
/////////////////////////////////////////////////////////////////////////////////////////////////
void split(Node* root, int key, Node*& left, Node*& right);
////////////////////////////////////////////////////////////////////////////////////////////////////////
void insert(Node*& root, int key);
////////////////////////////////////////////////////////////////////////////////////////////////
Node* intersection(Node* left, Node* right);
/////////////////////////////////////////////////////////////////////////////////////////////////
Node* search(Node* root, int key);
////////////////////////////////////////////////////////////////////////////////////////////////////
void remove(Node*& root, int key);
//////////////////////////////////////////////////////////////////////////////////////////////////////
void buildTree(Node*& root, std::vector<int> arr, int n);
//////////////////////////////////////////////////////////////////////////////////////////////////////
void printTree(Node* root, std::ofstream& file, int level);

#endif